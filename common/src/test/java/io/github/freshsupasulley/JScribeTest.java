/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.freshsupasulley;

import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.ExecutionException;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class JScribeTest {
	
	private static Path testModel = Path.of("src/test/resources/base.en.bin");
	private static Logger logger = LoggerFactory.getLogger(JScribeTest.class);
	
	// @Disabled
	@BeforeAll
	@Test
	static void downloadModel() throws IOException, InterruptedException, ExecutionException
	{
		System.out.println("Test");
		assert JScribe.getModels().length != 0;
		
		// Don't download the model file if we already have it
		if(testModel.toFile().exists())
		{
			logger.info("Not downloading, already exists");
			return;
		}
		
		ModelDownloader downloader = JScribe.downloadModel("tiny", testModel, (hi, exception) ->
		{
		});
		
		while(!downloader.isDone())
		{
			logger.info("Bytes: {}", downloader.getBytesRead());
			
			Thread.sleep(500);
		}
	}
	
	@Disabled
	@Test
	void startStopTest() throws Exception
	{
		JScribe scribe = new JScribe.Builder(testModel).build();//.warmUpModel().build();
		
		long startTime = System.currentTimeMillis();
		long testDuration = 20000;
		
		System.out.println("Starting stability test");
		
		while(System.currentTimeMillis() - startTime < testDuration)
		{
			if(scribe.isInUse())
			{
				throw new IllegalStateException("Shouldn't be running!");
			}
			
			// Constantly start and stop
			scribe.start();
			// Thread.sleep(5000);
			scribe.stop();
		}
	}
}
